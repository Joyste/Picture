package lifeexperience.tool.beautycamera.utils;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import java.util.ArrayList;import java.util.List;/** * JSON解释对像 */public class OperateJson{    /**     * 加载json字符串     *     * @param obj 标准的json对像     * @return     */    public static JSONObject ReadJsonObject(org.json.JSONObject obj)    {        if (obj != null) {            try {                return ReadJsonString(obj.toString());            }            catch (Exception e) {            }        }        return null;    }    /**     * 加载json字符串     *     * @param jsonString 标准的json字符串     * @return     */    public static JSONObject ReadJsonString(String jsonString)    {        try {            if (jsonString!=null) {                return JSON.parseObject(jsonString);                //return new JSONObject(jsonString);            }        }        catch (Exception ex) {//            AppLogs.PrintException(ex);        }        return null;    }    /**     * 是否空的JSON对像     *     * @param json     * @return     */    public static boolean isEmpty(JSONObject json)    {        if (json == null || json.isEmpty()) {            return true;        }        return false;    }    /**     * 是否空列表的JSON列表对像     *     * @param json     * @return     */    public static boolean isEmpty(JSONArray json)    {        if (json == null || json.isEmpty() || json.size() <= 0) {            return true;        }        return false;    }    /**     * 加载json字符串     *     * @param jsonString 标准的json字符串     * @return     */    public static JSONArray ReadJsonArrayString(String jsonString)    {        try {            return JSON.parseArray(jsonString);            //return new JSONArray(jsonString);        }        catch (Exception ex) {//            AppLogs.PrintException(ex);        }        return null;    }    /**     * 加载json文件     *     * @param jsonPath 标准的json文件路径     * @return     */    public static JSONObject ReadJsonFile(String jsonPath)    {        try {//            return ReadJsonString(MediaManager.GetFileDataString(jsonPath));        }        catch (Exception ex) {//            AppLogs.PrintException(ex);        }        return null;    }    /**     * 检测提定KEY是否存在     *     * @param obj     * @param key     * @return     */    public static boolean containsKey(JSONObject obj, Object key)    {        if (obj == null) {            return false;        }        return obj.containsKey(key);    }    /**     * 检测提定VALUE是否存在     *     * @param obj     * @param value     * @return     */    public static boolean containsValue(JSONObject obj, Object value)    {        if (obj == null) {            return false;        }        return obj.containsValue(value);    }    /**     * 返回指定Json对像的double数据     *     * @param item         要查找的对像     * @param name         要查找的名     * @param defaultValue 默认值     */    public static Double getDouble(JSONObject item, String name, double defaultValue)    {        if (item != null) {            try {                Double value = item.getDouble(name);                if (value != null) {                    return value;                }            }            catch (Exception e) {            }        }        return defaultValue;    }    /**     * 返回指定Json对像的double数据     *     * @param item         要查找的对像     * @param name         要查找的名     * @param defaultValue 默认值     */    public static Float getFloat(JSONObject item, String name, float defaultValue)    {        if (item != null) {            try {                Float value = item.getFloat(name);                if (value != null) {                    return value;                }            }            catch (Exception e) {            }        }        return defaultValue;    }    /**     * 返回指定Json对像的Int数据     *     * @param item         要查找的对像     * @param name         要查找的名     * @param defaultValue 默认值     */    public static Integer getInt(JSONObject item, String name, int defaultValue)    {        if (item != null) {            try {                Integer value = item.getInteger(name);                if (value != null) {                    return value;                }            }            catch (Exception e) {            }        }        return defaultValue;    }    /**     * 返回指定Json对像的Int数据     *     * @param item         要查找的对像     * @param name         要查找的名     * @param defaultValue 默认值     */    public static Boolean getBoolean(JSONObject item, String name, boolean defaultValue)    {        if (item != null) {            try {                Boolean value = item.getBoolean(name);                if (value != null) {                    return value;                }            }            catch (Exception e) {            }        }        return defaultValue;    }    /**     * 返回指定Json对像的Long数据     *     * @param item         要查找的对像     * @param name         要查找的名     * @param defaultValue 默认值     */    public static Long getLong(JSONObject item, String name, long defaultValue)    {        if (item != null) {            try {                Long value = item.getLong(name);                if (value != null) {                    return value;                }            }            catch (Exception e) {            }        }        return defaultValue;    }    /**     * 返回指定Json对像的String数据     *     * @param item 要查找的对像     * @param name 要查找的名     */    public static String getString(JSONObject item, String name)    {        return getString(item, name, null);    }    /**     * 返回指定Json对像的String数据     *     * @param item         要查找的对像     * @param name         要查找的名     * @param defaultValue 默认值     */    public static String getString(JSONObject item, String name, String defaultValue)    {        if (item != null) {            try {                String value = item.getString(name);                if (value != null) {                    return value;                }            }            catch (Exception e) {            }        }        return defaultValue;    }    /**     * 返回指定Json对像的String列表数据     *     * @param item 要查找的对像     * @param name 要查找的名     */    public static List<String> getStringList(JSONObject item, String name)    {        if (item != null) {            try {                JSONArray value = item.getJSONArray(name);                if (value != null) {                    ArrayList<String> list = new ArrayList<String>(value.size());                    for (int i = 0; i < value.size(); i++) {                        list.add(value.get(i).toString());                    }                    return list;                }            }            catch (Exception e) {            }        }        return null;    }    /**     * 返回指定Json对像的JSONArray数据     *     * @param item 要查找的对像     * @param name 要查找的名     */    public static JSONArray getJSONArray(JSONObject item, String name)    {        if (item != null) {            try {                JSONArray value = item.getJSONArray(name);                if (value != null) {                    return value;                }            }            catch (Exception e) {            }        }        return null;    }    /**     * 返回指定Json对像的JSONObject数据     *     * @param item 要查找的对像     * @param name 要查找的名     * @return JSONObject     */    public static JSONObject getJSONObject(JSONObject item, String name)    {        if (item != null) {            try {                JSONObject value = item.getJSONObject(name);                if (value != null) {                    return value;                }            }            catch (Exception e) {            }        }        return null;    }    /**     * 返回指定Json对像的JSONArray数据     *     * @param item  要查找的对像     * @param index 循环索引     */    public static JSONObject getJSONObject(JSONArray item, int index)    {        if (item != null) {            try {                JSONObject value = item.getJSONObject(index);                if (value != null) {                    return value;                }            }            catch (Exception e) {            }        }        return null;    }    /**     * 返回指定Json对像的JSONArray数据中的索引值 这个有区别于getJSONObject     *     * @param item  要查找的对像     * @param index 循环索引     */    public static Object getJSONObjectValue(JSONArray item, int index)    {        if (item != null) {            try {                Object value = item.get(index);                if (value != null) {                    return value;                }            }            catch (Exception e) {            }        }        return null;    }    // /**    // * 返回指定Json对像的JSONObject数据    // *    // * @param item要查找的对像    // * @param name    // * 要查找的名    // */    // public static List<JSONObject> getJSONObjectList(JSONObject item, String    // name)    // {    // if (item != null)    // {    // return item.optJSONObject(name);    // }    // return null;    // }    /**     * 将对象转换成Json字符串     *     * @param obj     * @return json类型字符串     */    public static String getJsonToClass(Object obj)    {        try {            return JSON.toJSONString(obj);        }        catch (Exception E) {            return null;        }    }    /**     * 反序列化简单对象     *     * @param jsonStr json字符串     * @param clazz   实体类类型     * @return 反序列化后的实例     */    public static <T> T getClassFromString(String jsonStr, Class<T> clazz)    {        if (clazz == null || jsonStr == null || jsonStr.length() == 0) {            return null;        }        try {            return JSON.parseObject(jsonStr, clazz);        }        catch (Exception e) {//            AppLogs.PrintException(e);        }        return null;    }    /**     * 反序列化简单列表对象     *     * @param jsonStr json字符串     * @param clazz   实体类类型     * @return 反序列化后的实例列表     */    public static <T> List<T> getClassListFromString(String jsonStr, Class<T> clazz)    {        if (clazz == null || jsonStr == null || jsonStr.length() == 0) {            return null;        }        try {            return JSON.parseArray(jsonStr, clazz);        }        catch (Exception e) {//            AppLogs.PrintException(e);        }        return null;    }    /**     * 给一个JSON对像添加一项     *     * @param jsonObject     * @param key     * @param value     * @return     */    public static boolean setJsonItemValue(JSONObject jsonObject, String key, Object value)    {        if (value == null || key == null || jsonObject == null) {            return false;        }        try {            jsonObject.put(key, value);            return true;        }        catch (Exception e) {//            AppLogs.PrintException(e);            return false;        }    }}